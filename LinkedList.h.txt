#pragma once
template <class T>
class LinkedList {
public:
	LinkedList() { first = NULL; }

	bool isEmpty() { return (first == NULL); }

	void insertFirst(LLNode<T>* np) {
		np->setNext(first);
		first = np;
	}
	void deleteFirst() { if(!isEmpty()) first = first->getNext(); }

	T getFirst() {
		if (!isEmpty()) {
			return first->getData();
		}
		else {
			return 0;
		}
	}

	std::string toString() const {
		std::string str = "";
		LLNode<T>* ptr = first;
		while (ptr != NULL) {
			str += ptr->toString();
			ptr = ptr->getNext();
		}
		return str;
	}

private:
	LLNode<T>* first;
};