#include <iostream>
#include <string>
#include <sstream>
#include "LLNode.h"
#include "LinkedList.h"
#include "Stack.h"
#include "Expressions.h"

int main() {
	std::string str = "abd";
	
	std::cout << str << std::endl;




	// provided test parameters

	//LLNode<std::string> n1("abc");
	LLNode<int> n1(9);

	//std::string s = n1.toString();
	int x = n1.getData();
	std::cout << "n1:9: " << n1.toString() << std::endl;

	LLNode<std::string> n2("ilyas");
	std::cout << "n2:ilyas: " << n2.toString() << std::endl;

	LinkedList<int> l1;
	std::cout << "l1:empty: " << l1.toString() << std::endl;
	l1.insertFirst(new LLNode<int>(5));
	std::cout << "l1:5: " << l1.toString() << std::endl;
	l1.insertFirst(new LLNode<int>(8));
	std::cout << "l1:8 5: " << l1.toString() << std::endl;
	l1.insertFirst(new LLNode<int>(7));
	std::cout << "l1:7 8 5: " << l1.toString() << std::endl;
	
	LinkedList<std::string> l2;
	std::cout << "l2:empty: " << l2.toString() << l2.isEmpty() << std::endl;
	l2.insertFirst(new LLNode<std::string>("Cicekly"));
	std::cout << "l2:Cicekli: " << l2.toString() << std::endl;
	l2.insertFirst(new LLNode<std::string>("Ilyas "));
	std::cout << "l2:Ilyas Cicekli: " << l2.toString() << std::endl;
	
	LinkedList<char> l3;
	std::cout << "l3:empty: " << l3.toString() << l3.isEmpty() << std::endl;
	l3.insertFirst(new LLNode<char>('5'));
	std::cout << "l3:5: " << l3.toString() << std::endl;
	l3.insertFirst(new LLNode<char>('*'));
	std::cout << "l3:* 5: " << l3.toString() << std::endl;
	l3.insertFirst(new LLNode<char>('6'));
	std::cout << "l3:6 * 5: " << l3.toString() << std::endl;
	
	
	Stack<char> s1;
	std::cout << "s1:empty: " << s1.toString() << std::endl;
	s1.push('a');
	std::cout << "s1:a: " << s1.toString() << std::endl;
	s1.push('b');
	std::cout << "s1:b a: " << s1.toString() << std::endl;
	std::cout << "s1:b: " << s1.peekTop() << std::endl;
	s1.pop();
	s1.push('a');
	std::cout << "s1:a: " << s1.peekTop() << std::endl;
	
	Expression e1("a+b*c+b*d");
	int varvals[] = { 5,4,3,2,1 };

	std::cout << "e1.infix:a+b*c+b*d: " << e1.infixExpression() << std::endl;
	std::cout << "e1.postfix:abc*+bd*+: " << e1.postfixExpression() << std::endl;
	std::cout << "e1.value:25: " << e1.evaluateExpression(varvals) << std::endl;

	Expression e2("a+b*c*c/d+f+g-b*a*c/e");
	std::cout << "e2.postfix: " << e2.postfixExpression() << std::endl;
	int varvals2[] = { 1, 4, 5, 7, 6, 8, 9 };
	std::cout << "e2.value: " << e2.evaluateExpression(varvals2) << std::endl;
	
	getchar();
	return 0;
}